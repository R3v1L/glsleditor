<?xml version="1.0" encoding="UTF-8" ?>
<glsleproject name="Adaptive Anti-Aliasing" version="0.1">
<!-- Project comments and information -->
<comments>Anti-Aliasing adaptivo</comments>

<!-- Project environment -->
<environment></environment>

<!-- Vertex data section -->
<vertexdata>//
// Vertex shader for adaptively antialiasing a procedural stripe pattern
//
// Author: Randi Rost
//         based on a shader by Bert Freudenberg
//
// Copyright (c) 2002-2004 3Dlabs Inc. Ltd. 
//
// See 3Dlabs-License.txt for license information
//

uniform vec3 LightPosition;

varying float V;
varying float LightIntensity;
 
void main(void)
{
    LightPosition=vec3(0,0.4,0.4);
    vec3 pos        = vec3(gl_ModelViewMatrix * gl_Vertex);
    vec3 tnorm      = normalize(gl_NormalMatrix * gl_Normal);
    vec3 lightVec   = normalize(LightPosition - pos);

    LightIntensity = max(dot(lightVec, tnorm), 0.0);

    V = gl_MultiTexCoord0.s;  // try .s for vertical stripes

    gl_Position = ftransform();
}</vertexdata>

<!-- Fragment data section -->
<fragmentdata>//
// Fragment shader for adaptively antialiasing a procedural stripe pattern
//
// Author: Randi Rost
//         based on a shader by Bert Freudenberg
//
// Copyright (c) 2002-2004 3Dlabs Inc. Ltd. 
//
// See 3Dlabs-License.txt for license information
//

varying float V;                    // generic varying
varying float LightIntensity;

uniform float Frequency=16;            // Stripe frequency = 16

void main (void)
{
    vec3 color;
    float sawtooth = fract(V * Frequency);
    float triangle = abs(2.0 * sawtooth - 1.0);
    float dp = length(vec2 (dFdx(V), dFdy(V)));
    float edge = dp * Frequency * 2.0;
    float square = smoothstep(0.5 - edge, 0.5 + edge, triangle);
    color = vec3(square) * LightIntensity;
    gl_FragColor=vec4(color,1);
}</fragmentdata>

<!-- Textures section -->
<textures></textures>
</glsleproject>