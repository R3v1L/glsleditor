<?xml version="1.0" encoding="UTF-8" ?>
<glsleproject name="Clouds Shader" version="0.1">
<!-- Project comments and information -->
<comments>Shader para realizaci√≥n de nubes</comments>

<!-- Project environment -->
<environment></environment>

<!-- Vertex data section -->
<vertexdata>
//
// Vertex shader for producing clouds (mostly cloudy)
//
// Author: Randi Rost
//
// Copyright (c) 2002-2004 3Dlabs Inc. Ltd.
//
// See 3Dlabs-License.txt for license information
//

varying float LightIntensity;
varying vec3  MCposition;

uniform vec3  LightPos;
uniform float Scale;

void main(void)
{
    LightPos=vec3(0,0.4,0.4);
    Scale=0.759;
    vec4 ECposition = gl_ModelViewMatrix * gl_Vertex;
    MCposition      = vec3 (gl_Vertex) * Scale;
    vec3 tnorm      = normalize(vec3 (gl_NormalMatrix * gl_Normal));
    LightIntensity  = dot(normalize(LightPos - vec3 (ECposition)), tnorm) * 1.5;
    gl_Position     = ftransform();
}

</vertexdata>

<!-- Fragment data section -->
<fragmentdata>//
// Fragment shader for producing clouds (mostly cloudy)
//
// Author: Randi Rost
//
// Copyright (c) 2002-2004 3Dlabs Inc. Ltd.
//
// See 3Dlabs-License.txt for license information
//

varying float LightIntensity; 
varying vec3  MCposition;
uniform int  TIME_FROM_INIT;
uniform sampler3D Noise;
vec3 Offset = vec3(0,0,0);
uniform vec3 SkyColor;     // (0.0, 0.0, 0.8)
uniform vec3 CloudColor;   // (0.8, 0.8, 0.8)

void main (void)
{
  SkyColor=vec3(0,0,0.8);
  CloudColor=vec3(0.8,0.8,0.8);

  float offset = float(TIME_FROM_INIT) *0.0001;
  Offset = vec3(-offset,offset,offset); // uncomment this line for animation
  vec4  noisevec  = texture3D(Noise, MCposition + Offset);  
  float intensity = (noisevec[0] + noisevec[1] + 
                     noisevec[2] + noisevec[3] + 0.03125) * 1.5;         
  vec3 color   = mix(SkyColor, CloudColor, intensity) * LightIntensity;  
  color  = clamp(color, 0.0, 1.0);
  gl_FragColor = vec4 (color, 1.0);
 
}

</fragmentdata>

<!-- Textures section -->
<textures></textures>
</glsleproject>